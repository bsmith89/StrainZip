import sqlite3
from io import StringIO

import strainzip as sz


def test_bcalm_fn_io():
    # NOTE: _Real_ BCALM output has a trailing space after each header line for some reason.
    f = StringIO(
        """
>0 LN:i:53 KC:i:6 km:f:2.0   L:+:47189:+ L:-:15297:+
AAATCCCGTGAGGGGTTTCTGATAGTGGTGCTGTTCTGGACCGTGCTGGGTAG
>3289 LN:i:86 KC:i:72 km:f:2.0   L:+:47189:-
GTGGTCAGGCCAGAGAAAGATTCAAAAAACGCATCGGTAATCGTGAGGTTCGGGCTTTCCGAGAAGATAAAAGGGAGCGCACCGAC
>15297 LN:i:143 KC:i:93 km:f:1.0   L:-:0:+
CCCAGCACGGTCCAGAACAGCACCACTATCAGAAACCCCTCACGGGATTTCAGTTCGCCCTTCTCTTTACGGTTCGGCCACCACAGCATAGAACCAATGGCGAGGGCGACAAAAAAGGTCTGGGTAAAAGCGCGGCCCGCTCC
>47189 LN:i:101 KC:i:51 km:f:1.0   L:+:3289:-  L:-:0:-
TCCCGTGAGGGGTTTCTGATAGTGGTGCTGTTCTGGACCGTGCTGGGTAGCGTCGGTGCGCTCCCTTTTATCTTCTCGGAAAGCCCGAACCTCACGATTAC
>47188 LN:i:101 KC:i:51 km:f:1.0
TCCCGTGAGGGGTTTCTGATAGTGGTGCTGTTCTGGACCGTGCTGGGTAGCGTCGGTGCGCTCCCTCTTATCTTCT
"""
    )
    graph, sequences = sz.io.load_graph_and_sequences_from_linked_fasta(
        f, 51, sz.io.bcalm_header_tokenizer
    )
    assert graph.num_edges() == 6
    assert graph.num_vertices() == 10
    assert len(sequences) == 5


def test_ggcat_fn_io():
    f = StringIO(
        """
>0 LN:i:53 L:+:47189:+ L:-:15297:+
AAATCCCGTGAGGGGTTTCTGATAGTGGTGCTGTTCTGGACCGTGCTGGGTAG
>3289 LN:i:86 L:+:47189:-
GTGGTCAGGCCAGAGAAAGATTCAAAAAACGCATCGGTAATCGTGAGGTTCGGGCTTTCCGAGAAGATAAAAGGGAGCGCACCGAC
>15297 LN:i:143 L:-:0:+
CCCAGCACGGTCCAGAACAGCACCACTATCAGAAACCCCTCACGGGATTTCAGTTCGCCCTTCTCTTTACGGTTCGGCCACCACAGCATAGAACCAATGGCGAGGGCGACAAAAAAGGTCTGGGTAAAAGCGCGGCCCGCTCC
>47189 LN:i:101 L:+:3289:- L:-:0:-
TCCCGTGAGGGGTTTCTGATAGTGGTGCTGTTCTGGACCGTGCTGGGTAGCGTCGGTGCGCTCCCTTTTATCTTCTCGGAAAGCCCGAACCTCACGATTAC
>47188 LN:i:101
TCCCGTGAGGGGTTTCTGATAGTGGTGCTGTTCTGGACCGTGCTGGGTAGCGTCGGTGCGCTCCCTCTTATCTTCT
"""
    )
    graph, sequences = sz.io.load_graph_and_sequences_from_linked_fasta(
        f, 51, sz.io.ggcat_header_tokenizer
    )
    assert graph.num_edges() == 6
    assert graph.num_vertices() == 10
    assert len(sequences) == 5


def test_sequence_depth_query():
    script = """
BEGIN TRANSACTION;
CREATE TABLE IF NOT EXISTS "count_"(
  kmer VARCHAR(111),
  ecoli_mg1655 INT,
  ecoli_o121h19 INT,
  bdorei_dsm17855 INT
);
INSERT INTO count_ VALUES('TCTTTTTTATCTTCGGTCATCTTTATCTTTGCACCACGGGGCGTACGCCACACGAAACCTTTAAAAGCATGGTCGATGGCTATCACCGGCACTAACGAATGATCATTACAC',1,1,0);
INSERT INTO count_ VALUES('CTCTTTTTTATCTTCGGTCATCTTTATCTTTGCACCACGGGGCGTACGCCACACGAAACCTTTAAAAGCATGGTCGATGGCTATCACCGGCACTAACGAATGATCATTACA',1,1,0);
INSERT INTO count_ VALUES('CCTCTTTTTTATCTTCGGTCATCTTTATCTTTGCACCACGGGGCGTACGCCACACGAAACCTTTAAAAGCATGGTCGATGGCTATCACCGGCACTAACGAATGATCATTAC',1,1,0);
INSERT INTO count_ VALUES('TAATGATCATTCGTTAGTGCCGGTGATAGCCATCGACCATGCTTTTAAAGGTTTCGTGTGGCGTACGCCCCGTGGTGCAAAGATAAAGATGACCGAAGATAAAAAAGAGGC',1,1,0);
INSERT INTO count_ VALUES('AATGATCATTCGTTAGTGCCGGTGATAGCCATCGACCATGCTTTTAAAGGTTTCGTGTGGCGTACGCCCCGTGGTGCAAAGATAAAGATGACCGAAGATAAAAAAGAGGCT',1,1,0);
INSERT INTO count_ VALUES('AAGCCTCTTTTTTATCTTCGGTCATCTTTATCTTTGCACCACGGGGCGTACGCCACACGAAACCTTTAAAAGCATGGTCGATGGCTATCACCGGCACTAACGAATGATCAT',1,1,0);
INSERT INTO count_ VALUES('TAAGCCTCTTTTTTATCTTCGGTCATCTTTATCTTTGCACCACGGGGCGTACGCCACACGAAACCTTTAAAAGCATGGTCGATGGCTATCACCGGCACTAACGAATGATCA',1,1,0);
INSERT INTO count_ VALUES('ATAAGCCTCTTTTTTATCTTCGGTCATCTTTATCTTTGCACCACGGGGCGTACGCCACACGAAACCTTTAAAAGCATGGTCGATGGCTATCACCGGCACTAACGAATGATC',1,1,0);
INSERT INTO count_ VALUES('ATCATTCGTTAGTGCCGGTGATAGCCATCGACCATGCTTTTAAAGGTTTCGTGTGGCGTACGCCCCGTGGTGCAAAGATAAAGATGACCGAAGATAAAAAAGAGGCTTATA',1,1,0);
INSERT INTO count_ VALUES('TCATTCGTTAGTGCCGGTGATAGCCATCGACCATGCTTTTAAAGGTTTCGTGTGGCGTACGCCCCGTGGTGCAAAGATAAAGATGACCGAAGATAAAAAAGAGGCTTATAA',1,1,0);
INSERT INTO count_ VALUES('CATTCGTTAGTGCCGGTGATAGCCATCGACCATGCTTTTAAAGGTTTCGTGTGGCGTACGCCCCGTGGTGCAAAGATAAAGATGACCGAAGATAAAAAAGAGGCTTATAAA',1,1,0);
INSERT INTO count_ VALUES('ATTCGTTAGTGCCGGTGATAGCCATCGACCATGCTTTTAAAGGTTTCGTGTGGCGTACGCCCCGTGGTGCAAAGATAAAGATGACCGAAGATAAAAAAGAGGCTTATAAAT',1,1,0);
INSERT INTO count_ VALUES('CATTTATAAGCCTCTTTTTTATCTTCGGTCATCTTTATCTTTGCACCACGGGGCGTACGCCACACGAAACCTTTAAAAGCATGGTCGATGGCTATCACCGGCACTAACGAA',1,1,0);
INSERT INTO count_ VALUES('TCGTTAGTGCCGGTGATAGCCATCGACCATGCTTTTAAAGGTTTCGTGTGGCGTACGCCCCGTGGTGCAAAGATAAAGATGACCGAAGATAAAAAAGAGGCTTATAAATGC',1,1,0);
INSERT INTO count_ VALUES('CGTTAGTGCCGGTGATAGCCATCGACCATGCTTTTAAAGGTTTCGTGTGGCGTACGCCCCGTGGTGCAAAGATAAAGATGACCGAAGATAAAAAAGAGGCTTATAAATGCC',1,1,0);
INSERT INTO count_ VALUES('TGGCATTTATAAGCCTCTTTTTTATCTTCGGTCATCTTTATCTTTGCACCACGGGGCGTACGCCACACGAAACCTTTAAAAGCATGGTCGATGGCTATCACCGGCACTAAC',1,1,0);
INSERT INTO count_ VALUES('CTGGCATTTATAAGCCTCTTTTTTATCTTCGGTCATCTTTATCTTTGCACCACGGGGCGTACGCCACACGAAACCTTTAAAAGCATGGTCGATGGCTATCACCGGCACTAA',1,1,0);
INSERT INTO count_ VALUES('TAGTGCCGGTGATAGCCATCGACCATGCTTTTAAAGGTTTCGTGTGGCGTACGCCCCGTGGTGCAAAGATAAAGATGACCGAAGATAAAAAAGAGGCTTATAAATGCCAGA',1,1,0);
INSERT INTO count_ VALUES('AGTGCCGGTGATAGCCATCGACCATGCTTTTAAAGGTTTCGTGTGGCGTACGCCCCGTGGTGCAAAGATAAAGATGACCGAAGATAAAAAAGAGGCTTATAAATGCCAGAG',1,1,0);
INSERT INTO count_ VALUES('GCTCTGGCATTTATAAGCCTCTTTTTTATCTTCGGTCATCTTTATCTTTGCACCACGGGGCGTACGCCACACGAAACCTTTAAAAGCATGGTCGATGGCTATCACCGGCAC',1,1,0);
INSERT INTO count_ VALUES('TGCCGGTGATAGCCATCGACCATGCTTTTAAAGGTTTCGTGTGGCGTACGCCCCGTGGTGCAAAGATAAAGATGACCGAAGATAAAAAAGAGGCTTATAAATGCCAGAGCA',1,1,0);
INSERT INTO count_ VALUES('TTGCTCTGGCATTTATAAGCCTCTTTTTTATCTTCGGTCATCTTTATCTTTGCACCACGGGGCGTACGCCACACGAAACCTTTAAAAGCATGGTCGATGGCTATCACCGGC',1,1,0);
INSERT INTO count_ VALUES('CCGGTGATAGCCATCGACCATGCTTTTAAAGGTTTCGTGTGGCGTACGCCCCGTGGTGCAAAGATAAAGATGACCGAAGATAAAAAAGAGGCTTATAAATGCCAGAGCAAA',1,1,0);
INSERT INTO count_ VALUES('CGGTGATAGCCATCGACCATGCTTTTAAAGGTTTCGTGTGGCGTACGCCCCGTGGTGCAAAGATAAAGATGACCGAAGATAAAAAAGAGGCTTATAAATGCCAGAGCAAAA',1,1,0);
INSERT INTO count_ VALUES('ATTTTGCTCTGGCATTTATAAGCCTCTTTTTTATCTTCGGTCATCTTTATCTTTGCACCACGGGGCGTACGCCACACGAAACCTTTAAAAGCATGGTCGATGGCTATCACC',1,1,0);
INSERT INTO count_ VALUES('CATTTTGCTCTGGCATTTATAAGCCTCTTTTTTATCTTCGGTCATCTTTATCTTTGCACCACGGGGCGTACGCCACACGAAACCTTTAAAAGCATGGTCGATGGCTATCAC',1,1,0);
COMMIT;
"""
    con = sqlite3.connect(":memory:")
    con.executescript(script)

    seq = "GTGTAATGATCATTCGTTAGTGCCGGTGATAGCCATCGACCATGCTTTTAAAGGTTTCGTGTGGCGTACGCCCCGTGGTGCAAAGATAAAGATGACCGAAGATAAAAAAGAGGCTTATAAATGCCAGAGCAAAATG"
    k = 111
    kmer_depths = sz.io.load_sequence_depth_matrix(
        con,
        seq,
        k=k,
    )
    assert kmer_depths.shape[0] == len(seq) - k + 1
    assert kmer_depths.shape[1] == 3
    con.close()
