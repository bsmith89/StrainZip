from typing import (
    Any,
    Generic,
    List,
    MutableMapping,
    NewType,
    Optional,
    Sequence,
    Tuple,
    TypeVar,
)

from numpy.typing import NDArray

from . import draw

ScalarT = TypeVar("ScalarT", bound=Any)

class Vertex: ...

class Graph:
    vertex_properties: MutableMapping[str, VertexPropertyMap]
    vp: MutableMapping[str, VertexPropertyMap]
    def add_vertex(self, n=1): ...
    def add_edge_list(self, edge_list: List[Tuple[int, int]]) -> None: ...
    def new_vertex_property(
        self, return_type, vals=None, val=None
    ) -> VertexPropertyMap: ...
    def __len__(self) -> int: ...
    def get_in_neighbors(self, v, vprops=Sequence[VertexPropertyMap]) -> NDArray: ...
    def get_out_neighbors(self, v, vprops=Sequence[VertexPropertyMap]) -> NDArray: ...
    def num_vertices(self, ignore_filter=False) -> int: ...
    def set_vertex_filter(self, VertexPropertyMap) -> None: ...

class GraphView(Graph):
    def __init__(self, g, vfilt=None, skip_vfilt=False): ...

class PropertyMap(Generic[ScalarT]):
    def __getitem__(self, i: int) -> ScalarT: ...
    def __setitem__(self, i: int, val: ScalarT) -> None: ...
    @property
    def a(self) -> NDArray: ...
    def __iter__(self): ...
    def get_2d_array(self, pos: Sequence[int]) -> NDArray: ...
    def set_2d_array(self, a, pos=None) -> None: ...

class VertexPropertyMap(PropertyMap): ...

PropMapT = TypeVar("PropMapT", bound=PropertyMap)

def group_vector_property(
    props: Sequence[PropMapT], value_type: Optional[str] = None, pos=Sequence[int]
) -> PropMapT: ...
def ungroup_vector_property(vprop: PropMapT, pos, props=None) -> List[PropMapT]: ...
def seed_rng(seed: int) -> None: ...
